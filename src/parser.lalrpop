use std::str::FromStr;

use evscript::parser::*;
use lalrpop_util::ParseError;

grammar;

pub Env: Environment = {
	"env" <name:Iden> "{" <contents:Statement*> "}" => {
		Environment { name, contents }
	}
};

Statement: Statement = {
	"def" <name:Iden> "(" ")" ";" => {
		Statement::Def(Def {name, args: vec![]})
	}
}

pub Expr: Rpn = {
	<l:Expr> "+" <r:Factor> => Rpn::Add(Box::new(l), Box::new(r)),
	<l:Expr> "-" <r:Factor> => Rpn::Sub(Box::new(l), Box::new(r)),
	Factor,
};

Factor: Rpn = {
	<l:Factor> "*" <r:Term> => Rpn::Mul(Box::new(l), Box::new(r)),
	<l:Factor> "/" <r:Term> => Rpn::Div(Box::new(l), Box::new(r)),
	<l:Factor> "%" <r:Term> => Rpn::Mod(Box::new(l), Box::new(r)),
	Term,
};

Term: Rpn = {
	Num,
	Iden => Rpn::Variable(<>),
	"(" <Expr> ")",
};

Num: Rpn = {
	r"[0-9]+" =>? Ok(Rpn::Unsigned(u64::from_str(<>)
		.map_err(|_| ParseError::User {
			error: "Unsigned number is too large (maximum of 64 bits)"
		})?)),
	r"-[0-9]+" =>? Ok(Rpn::Signed(i64::from_str(<>)
		.map_err(|_| ParseError::User {
			error: "Signed number is too large (maximum of 64 bits)"
		})?)),
};

Iden: String = {
	r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from(<>),
};
